주요 개념 키워드 적어보기

- issue : 위에서 정한 작업방식 중 1단계를 issue를 사용해 작업할 수 있다.
👉  1단계. 누가 이 작업 할 것인지 정한다. - Issue
2단계. 각자 맡은 것을 작업한다. - Branch
3단계. 각자 작업을 프로젝트에 합친다. - merge
(경우에 따라). 작업한 내용을 리뷰하고 최종적으로 프로젝트에 반영한다. - PR 후 merge

- branch : 브랜치(branch)를 사용하게 되면 나뭇가지가 뻗어나오듯 기능에 맞게 나누어 작업할 수 있다.

- merge(병합) : 브랜치를 다른 브랜치에 합치는 것이다. 
  즉, 특정 브랜치의 commit 들을 다른 브랜치의 commit 내역에 모두 반영하는 것이다. 
  기본적인 설정은 해당 브랜치의 모든 commit 을 모두 다 반영한다고 생각하면 된다.

- merge conflict : merge(병합) 할때 일어나는 conflict(충돌)을 말한다.
  에러를 안 내는 게 중요한게 아니라 버그(컴퓨터가 의도한 대로 동작하지 않는 것)를 고칠 수 있느냐 없느냐가 중요하다!!!

# <<<<<<< HEAD
  {현재 브랜치의 다른 파일 내용}
  =======
  {충돌나는 브랜치명 또는 commit에서의 다른 파일 내용}
  >>>>>>> 충돌나는 브랜치명 또는 commmit 아이디
 ● 이 merge conflict를 고치려면,
 ● 내가 원하는 대로 파일을 수정하고(어떤 내용을 반영할지 결정)
 ● [<<<<<<< HEAD,   =======, >>>>>>> 충돌나는 브랜치명 또는 commmit 아이디]를 지우면 된다. 그러면 Git이 해결되었구나! 하고 알아듣는다.
 ● 그런 후에 수정된 파일을 commit하면 된다.

- 원격 repo의 branch : 따로 설정을 해주지 않으면 기본적으로 로컬 repo의 브랜치명과 같게 원격 repo의 브랜치명이 생성되어 tracking된다.

